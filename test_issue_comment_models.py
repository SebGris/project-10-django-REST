"""
Script de test pour valider les mod√®les Issue et Comment
"""
import os
import django

# Configuration Django (DOIT √™tre fait AVANT d'importer les mod√®les)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'softdesk_support.settings')
django.setup()

# MAINTENANT on peut importer les mod√®les Django
from users.models import User  # noqa: E402
from issues.models import Project, Contributor, Issue, Comment  # noqa: E402


def test_issue_comment_logic():
    """Test des mod√®les Issue et Comment"""
    print("üß™ Test des mod√®les Issue et Comment")
    print("=" * 50)
    
    # 1. Cr√©er des utilisateurs de test
    print("\n1Ô∏è‚É£ Cr√©ation des utilisateurs de test...")
    try:
        # Supprimer les utilisateurs existants pour un test propre
        User.objects.filter(username__in=['test_author', 'test_assignee', 'test_commenter']).delete()
        
        author = User.objects.create_user(
            username='test_author',
            email='author@test.com',
            password='testpass123',
            age=25
        )
        assignee = User.objects.create_user(
            username='test_assignee', 
            email='assignee@test.com',
            password='testpass123',
            age=30
        )
        commenter = User.objects.create_user(
            username='test_commenter', 
            email='commenter@test.com',
            password='testpass123',
            age=28
        )
        print("‚úÖ Utilisateurs cr√©√©s avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des utilisateurs: {e}")
        return
    
    # 2. Cr√©er un projet
    print("\n2Ô∏è‚É£ Cr√©ation d'un projet...")
    try:
        # Supprimer les projets existants pour un test propre
        Project.objects.filter(name='Test Project Issues').delete()
        
        project = Project.objects.create(
            name='Test Project Issues',
            description='Projet de test pour valider les issues et commentaires',
            type='back-end',
            author=author
        )
        print("‚úÖ Projet cr√©√© avec succ√®s")
        print(f"   Auteur: {project.author.username}")
        
        # Ajouter les autres utilisateurs comme contributeurs
        Contributor.objects.create(user=assignee, project=project)
        Contributor.objects.create(user=commenter, project=project)
        print(f"   Contributeurs ajout√©s: {assignee.username}, {commenter.username}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du projet: {e}")
        return
    
    # 3. Cr√©er des issues
    print("\n3Ô∏è‚É£ Cr√©ation d'issues...")
    try:
        # Issue 1: Bug non assign√©
        issue1 = Issue.objects.create(
            name='Bug de connexion',
            description='Les utilisateurs ne peuvent pas se connecter',
            priority='HIGH',
            tag='BUG',
            status='To Do',
            project=project,
            author=author
        )
        print(f"‚úÖ Issue 1 cr√©√©e: {issue1.name} (priorit√©: {issue1.priority}, statut: {issue1.status})")
        
        # Issue 2: Feature assign√©e
        issue2 = Issue.objects.create(
            name='Nouvelle fonctionnalit√© de recherche',
            description='Ajouter une barre de recherche avanc√©e',
            priority='MEDIUM',
            tag='FEATURE',
            status='In Progress',
            project=project,
            author=author,
            assigned_to=assignee
        )
        print(f"‚úÖ Issue 2 cr√©√©e: {issue2.name} (assign√©e √†: {issue2.assigned_to.username})")
        
        # Issue 3: T√¢che cr√©√©e par un contributeur
        issue3 = Issue.objects.create(
            name='Documentation API',
            description='R√©diger la documentation de l\'API',
            priority='LOW',
            tag='TASK',
            status='To Do',
            project=project,
            author=commenter
        )
        print(f"‚úÖ Issue 3 cr√©√©e: {issue3.name} (auteur: {issue3.author.username})")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des issues: {e}")
        return
    
    # 4. Cr√©er des commentaires
    print("\n4Ô∏è‚É£ Cr√©ation de commentaires...")
    try:
        # Commentaire 1: Sur l'issue 1
        comment1 = Comment.objects.create(
            description='J\'ai reproduit le bug, il semble li√© au JWT',
            issue=issue1,
            author=assignee
        )
        print(f"‚úÖ Commentaire 1 cr√©√© sur '{issue1.name}' par {comment1.author.username}")
        
        # Commentaire 2: R√©ponse de l'auteur
        comment2 = Comment.objects.create(
            description='Merci pour l\'info. Je vais investiguer le probl√®me JWT.',
            issue=issue1,
            author=author
        )
        print(f"‚úÖ Commentaire 2 cr√©√© sur '{issue1.name}' par {comment2.author.username}")
        
        # Commentaire 3: Sur l'issue 2
        comment3 = Comment.objects.create(
            description='J\'ai commenc√© le d√©veloppement de la barre de recherche',
            issue=issue2,
            author=assignee
        )
        print(f"‚úÖ Commentaire 3 cr√©√© sur '{issue2.name}' par {comment3.author.username}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des commentaires: {e}")
        return
    
    # 5. Tests des relations
    print("\n5Ô∏è‚É£ Test des relations...")
    
    # Issues du projet
    project_issues = project.issues.all()
    print(f"   Nombre d'issues dans le projet: {len(project_issues)}")
    for issue in project_issues:
        print(f"     - {issue.name} (auteur: {issue.author.username}, assign√©: {issue.assigned_to.username if issue.assigned_to else 'Non assign√©'})")
    
    # Commentaires de l'issue 1
    issue1_comments = issue1.comments.all()
    print(f"   Nombre de commentaires sur '{issue1.name}': {len(issue1_comments)}")
    for comment in issue1_comments:
        print(f"     - Par {comment.author.username}: {comment.description[:50]}...")
    
    # Issues assign√©es √† assignee
    assigned_issues = assignee.assigned_issues.all()
    print(f"   Issues assign√©es √† {assignee.username}: {len(assigned_issues)}")
    for issue in assigned_issues:
        print(f"     - {issue.name}")
    
    # Issues cr√©√©es par chaque utilisateur
    print(f"   Issues cr√©√©es par {author.username}: {author.authored_issues.count()}")
    print(f"   Issues cr√©√©es par {commenter.username}: {commenter.authored_issues.count()}")
    
    # Commentaires cr√©√©s par chaque utilisateur
    print(f"   Commentaires cr√©√©s par {assignee.username}: {assignee.authored_comments.count()}")
    print(f"   Commentaires cr√©√©s par {author.username}: {author.authored_comments.count()}")
    
    # 6. Test des m√©thodes __str__
    print("\n6Ô∏è‚É£ Test des m√©thodes __str__...")
    print(f"   Issue 1: {issue1}")
    print(f"   Comment 1: {comment1}")
    
    # 7. Test des IDs UUID pour les commentaires
    print("\n7Ô∏è‚É£ Test des IDs UUID...")
    print(f"   Comment 1 ID (UUID): {comment1.id}")
    print(f"   Comment 2 ID (UUID): {comment2.id}")
    print(f"   Type: {type(comment1.id)}")
    
    print("\nüéâ Tests termin√©s avec succ√®s!")
    print("=" * 50)
    
    # Nettoyage
    print("\nüßπ Nettoyage des donn√©es de test...")
    Project.objects.filter(name='Test Project Issues').delete()
    User.objects.filter(username__in=['test_author', 'test_assignee', 'test_commenter']).delete()
    print("‚úÖ Nettoyage termin√©")


if __name__ == "__main__":
    test_issue_comment_logic()
